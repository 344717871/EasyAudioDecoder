/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_easydarwin_audio_AudioCodec.h"
#include "aacdec/AACDecoder.h"
#include "EasyTypes.h"
#include "g711.h"
#include <android/log.h>
/* Header for class org_easydarwin_audio_AudioCodec */
extern "C" {
	// ffmpeg
#include "libavutil/opt.h"
#include "libavcodec/avcodec.h"
#include "libavformat/avformat.h"
#include "libswscale/swscale.h"
#include "libswresample/swresample.h"
}
;

#define FFMPEG_TAG "ffmpeg"
struct _HANDLE_
{
	unsigned int code;
	void *pContext;
};


void my_logoutput(void* ptr, int level, const char* fmt,va_list vl){  
	__android_log_print (ANDROID_LOG_VERBOSE+level,FFMPEG_TAG,fmt, vl);
}  


/*
 * Class:     org_easydarwin_audio_AudioCodec
 * Method:    create
 * Signature: (III)I
 */
JNIEXPORT jint JNICALL Java_org_easydarwin_audio_AudioCodec_create
(JNIEnv *pEnv, jclass clz, jint code,jint sample_rate, jint channels, jint sample_bit){
	_HANDLE_ *pHandle = new _HANDLE_;
	pHandle->code = code;
	pHandle->pContext = 0;
	av_register_all();
	av_log_set_callback(my_logoutput); 	
	if (code == EASY_SDK_AUDIO_CODEC_AAC)
	{
		pHandle->pContext = aac_decoder_create(AV_CODEC_ID_AAC, sample_rate, channels, sample_bit);
	}
	else if (code == EASY_SDK_AUDIO_CODEC_G726)
	{
		pHandle->pContext = aac_decoder_create(AV_CODEC_ID_ADPCM_G726, sample_rate, channels, sample_bit);
	}
	return (jint)pHandle;
}

/*
 * Class:     org_easydarwin_audio_AudioCodec
 * Method:    decode
 * Signature: (I[BII[B[I)I
 */
JNIEXPORT jint JNICALL Java_org_easydarwin_audio_AudioCodec_decode
  (JNIEnv *pEnv, jclass clz, jint handle, jbyteArray buffer, jint offset, jint length, jbyteArray pcm, jintArray pcmLen){
	  _HANDLE_ *pHandle = (_HANDLE_ *)handle;
	  char * pEncoded = (char *)pEnv->GetByteArrayElements(buffer, 0);
	  char * pPCM = (char *)pEnv->GetByteArrayElements(pcm, 0);
	  int * pPCMLen = pEnv->GetIntArrayElements(pcmLen, 0);
	  int i = 0;
	  if (pHandle->code == EASY_SDK_AUDIO_CODEC_AAC || pHandle->code == EASY_SDK_AUDIO_CODEC_G726)
	  {
		  i = aac_decode_frame(pHandle->pContext, (unsigned char *)(pEncoded + offset),length, (unsigned char *)pPCM, (unsigned int*)pPCMLen);
	  }
	  else if (pHandle->code == EASY_SDK_AUDIO_CODEC_G711U){
		  short *pOut = (short *)(pPCM);
		  unsigned char *pIn = (unsigned char *)(pEncoded + offset);
		  for (int m=0; m<length; m++)
		  {
			  pOut[m] = ulaw2linear(pIn[m]);
		  }
		  *pPCMLen = length*2;
	  }else if (pHandle->code == EASY_SDK_AUDIO_CODEC_G711A){
		  short *pOut = (short *)(pPCM);
		  unsigned char *pIn = (unsigned char *)(pEncoded + offset);
		  for (int m=0; m<length; m++)
		  {
			  pOut[m] = alaw2linear(pIn[m]);
		  }
		  *pPCMLen = length*2;
	  }
	  pEnv->ReleaseByteArrayElements(buffer, (jbyte *)pEncoded, 0);
	  pEnv->ReleaseByteArrayElements(pcm, (jbyte *)pPCM, 0);
	  pEnv->ReleaseIntArrayElements(pcmLen, (jint *)pPCMLen, 0);
	  return i;
}

/*
 * Class:     org_easydarwin_audio_AudioCodec
 * Method:    aac_decode_close
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_org_easydarwin_audio_AudioCodec_close
  (JNIEnv *pEnv, jclass clz, jint handle){
	  _HANDLE_ *pHandle = (_HANDLE_ *)handle;
	  if (pHandle->code == EASY_SDK_AUDIO_CODEC_AAC)
	  {
		  aac_decode_close(pHandle->pContext);
	  }
	  delete pHandle;
}
